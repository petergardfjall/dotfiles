### Creating a repo

git init --bare --shared=group repo.git   Create a git repo that is to be
                                          shared and written by different
                                          group members. This sets the
                                          `sharedRepository` option in the
                                          repository config, which ensures that
                                          all members of the UNIX group that
                                          owns the repository are given write
                                          permission.


### Setup user for one or more git repos

git config --global user.name "Foo Bar"            # Set user globally.
git config --global user.email "foo@bar.com"

git config user.name "Foo Bar"                     # Set user for a single repo.
git config user.email "foo@bar.com"

git config --global credential.helper 'cache --timeout=3600'  # Set password
                                                              # cache timeout


### Basic commands

git fetch && git merge origin/master     # on master: same as git pull
git fetch && git rebase origin/master    # on master: same as git pull --rebase


git pull origin master --rebase          # avoids a merge commit if there are
                                         # changes on master


### Modifying global history

git revert <sha>                   # Revert a given commit. This adds a new
                                   # "anti-commit" to the commit history.


### Modifying local history

git reset <sha> [--hard]           # undo some local (non-pushed) commits.
                                   # reset rewinds your repository's history
                                   # all the way back to the specified SHA. By
                                   # default, git reset preserves the working
                                   # directory. The commits are gone, but the
                                   # content/modifications are still on disk.
                                   # If you want to undo the commits _and_ the
                                   # changes in one go: use --hard.

git reflog                         # while 'git log' shows the commit history,
                                   # reflog shows when the tip of HEAD changed.
                                   # It contains entries like
                                   #  8409289 HEAD@{0}: commit: ufw cheat sheet
                                   #  94d334e HEAD@{1}: commit: skubectl alias
                                   #
                                   # Reflog can be used to restore your local
                                   # HEAD to a certain point in time.
                                   #
git reset --hard <sha>             # restore the project's history as it was at
                                   # that moment in time
git checkout <sha> -- <filename>   # recreate one or more files in your working
                                   # directory as they were at that moment in
                                   # time, without altering history




### A simple Git workflow

git clone <repo-path> repo.git            Get repo.
cd repo.git

git checkout -b ticket123                 Create a local branch.

  ... work on branch, commit, etc...

git checkout master                       Rebase from most recent master remote.
git pull origin master
git checkout ticket123
git rebase [-i] master                      `-i` allows to squash branch commits
                                          into a single commit for a cleaner
                                          commit history and/or change commit
                                          messages.

git push origin ticket123:ticket1234      Push local branch to remote origin
                                          server. <localbranch>:<remotebranch>

git checkout master                       Merge with master branch and push
git merge ticket123                       to remote origin server.
git push origin master:master




### Patching
git add --patch <file>                    Divide a large changeset into smaller
git add --patch                           commits. Git will now ask you, for
                                          each hunk, if you want to stage it
                                          for the next commit. Answer `n` to
                                          all hunks you don’t want to be part
                                          of the commit and `y` to hunks that
                                          you want to include. Should a
                                          particular hunk contain both code
                                          that you want to include and code
                                          that you don’t want to include, you
                                          can split it by selecting `s`. Git
                                          will then split the hunk into smaller
                                          hunks and ask what to do with each of
                                          them. Hunks for which you answered `n`
                                          will still be left as changes in
                                          non-staged files. To see, what
                                          changes you staged for commit, run
                                          `git diff --staged`.

git diff HEAD --no-prefix > patchfile      Produce an old-school patch with
                                           both staged and unstaged changes
                                           compared to HEAD.
patch -p0 < patchfile                      Apply patch.


git format-patch -1 <sha>                  Produce a patch from an old commit
git apply --stat patchfile                 Show stats for patchfile.
git apply --check patchfile                Check for errors before applying.
git am < patchfile                         Apply patch
git am -3 < patchfile                      OR apply patch using three-way
                                           merge (lets you resolve conflicts
                                           manually or using git mergetool.


### Branches

git branch                                List local branches.
git branch -r                             List remote branches.
git branch <otherbranch>                  Switch local branch.

git branch -d ticket123                   Delete local branch.
git push origin :ticket123                Delete remote branch.


git fetch && git checkout ticket123       Checkout a remote branch.
git fetch && git checkout -b x origin/x


git pull origin ticket123                 Merge in branch updates from remote
                                          repository to your local copy of the
                                          branch.

git log <branch> -p --not origin/master   Show all changes introduced on a
                                          branch that aren't on the master
                                          branch (`-p` gives diffs in addition
                                          to commits).




### Rebasing
git rebase master                         Rebases current branch onto the
                                          current head commit of the `master`
					  branch. The commits on this branch are
					  replayed on top of `master`. NOTE: be
					  careful, this creates new commits
					  (with new sha-1 hashes). So if you
git push origin <mybr> --force-with-lease have pushed your branch to remote you
					  you will be warned that you're behind
					  your remote (since your commits have
					  new ids). Run push with `--force` to
					  force an overwrite of the remote
					  branch (and ensure your colleagues do
					  git pull origin <mybr> --rebase).

git rebase --onto master server client    Rebase the `client` branch on
                                          `master`, only replaying the patches
                                          from the `client` since it diverged
                                          from the `server` branch. So, this
                                          rebases `client` on the `master`
                                          branch with commits "client - server".


### Tags

git tag                                   Show tags (on current local branch).


git tag -a v1.0.0 -m 'version 1.0.0'      Tag the latest commit (on current
                                          local branch).

git push origin v1.0.0                    Share the tag by pushing it to the
                                          remote repository (by default the
                                          git push command doesn’t transfer
                                          tags to remote servers, you have to
                                          explicitly push tags to a shared
                                          server after you have created them).


git push origin :v1.0.0                   Remove a tag (for example, to re-do
                                          a broken release) in the remote
                                          repository.

git tag -d v1.0.0                         Remove a tag (for example, to re-do
                                          a broken release) in the local repo.



### Submodules

git submodule add <repo-url> <path>       Add a remote repo as a submodule.


git diff --submodule                      Nicer looking submodule diffs.
                                          To make `--submodule` flag permanent,
                                          set:
                                          git config --global diff.submodule log

git clone --recursive <repo>              Cloning a repo with submodules.

git clone <repo> && \                     Dito.
git submodule init && \
git submodule update


cd <submodule-dir> && git fetch \         Bring in upstream (and optionally
  [&& git merge origin/master]            keep) changes in a particular
                                          submodule.

git submodule update --remote             Fetch and merge upstream changes
                                          (from origin/master) for _all_
                                          submodules.

### Miscellaneous
git remote -v                             Show infor about remote repository.


### Remove sensitive files

If a file containing sensitive data has been mistakenly added (and pushed)
history can be rewritten to exclude the file as described here:

  https://help.github.com/articles/removing-sensitive-data-from-a-repository/
